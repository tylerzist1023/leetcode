{"id":1062894053,"lang":"python","lang_name":"Python","time":"3Â months","timestamp":1696062788,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/1062894053/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Search Tree","memory":"21.3 MB","code":"# Definition for a binary tree node.\n# class TreeNode(object):\n#     def __init__(self, x):\n#         self.val = x\n#         self.left = None\n#         self.right = None\n\nclass Solution(object):\n    def lowestCommonAncestor(self, root, p, q):\n        \"\"\"\n        :type root: TreeNode\n        :type p: TreeNode\n        :type q: TreeNode\n        :rtype: TreeNode\n        \"\"\"\n\n        if root == None:\n            return None\n\n        left = self.lowestCommonAncestor(root.left, p, q)\n        right = self.lowestCommonAncestor(root.right, p, q)\n\n        if left != None and right != None and (left.val == p.val and right.val == q.val or left.val == q.val and right.val == p.val):\n            p.val = root.val\n            return root\n        elif left != None and (left.val == p.val or left.val == q.val):\n            if root.val == p.val or root.val == q.val:\n                return root\n            else:\n                return left\n        elif right != None and (right.val == p.val or right.val == q.val):\n            if root.val == p.val or root.val == q.val:\n                return root\n            else:\n                return right\n        else:\n            return root","compare_result":"111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-search-tree","has_notes":false,"flag_type":1}