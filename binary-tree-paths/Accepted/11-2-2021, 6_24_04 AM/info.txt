{"id":580940675,"lang":"java","lang_name":"Java","time":"2 years, 1 month","timestamp":1635852244,"status":10,"status_display":"Accepted","runtime":"1 ms","url":"/submissions/detail/580940675/","is_pending":"Not Pending","title":"Binary Tree Paths","memory":"39.4 MB","code":"import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution\n{\n    private void nodeTraverser(TreeNode root, List<String> paths, List<Integer> path)\n    {\n        path.add(root.val);\n        if(root.left == null && root.right == null)\n        {\n            StringBuilder pathString = new StringBuilder(path.get(0).toString());\n            for(int i = 1; i < path.size(); i++)\n            {\n                pathString.append(\"->\").append(path.get(i).toString());\n            }\n            paths.add(pathString.toString());\n        }\n\n        if(root.left != null)\n        {\n            nodeTraverser(root.left, paths, path);\n            path.remove(path.size() - 1);\n        }\n        if(root.right != null)\n        {\n            nodeTraverser(root.right, paths, path);\n            path.remove(path.size() - 1);\n        }\n\n    }\n\n    public List<String> binaryTreePaths(TreeNode root)\n    {\n        List<String> paths = new ArrayList<>();\n\n        nodeTraverser(root, paths, new ArrayList<>());\n\n        return paths;\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-paths","has_notes":false,"flag_type":1}