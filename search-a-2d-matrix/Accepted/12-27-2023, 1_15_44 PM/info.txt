{"id":1129954192,"lang":"python3","lang_name":"Python3","time":"3 days, 16 hours","timestamp":1703704544,"status":10,"status_display":"Accepted","runtime":"93 ms","url":"/submissions/detail/1129954192/","is_pending":"Not Pending","title":"Search a 2D Matrix","memory":"17.9 MB","code":"class Solution:\n    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:\n        n = len(matrix[0])\n        m = len(matrix)\n\n        bottom = m-1\n        top = 0\n\n        while bottom-top > 1:\n            mid = (top + bottom) // 2\n            row = matrix[mid]\n            if target < row[0]:\n                bottom = mid-1\n            elif row[-1] < target:\n                top = mid+1\n            else:\n                return self.search(row, target)\n        \n        if matrix[top][0] <= target and target <= matrix[top][-1]:\n            return self.search(matrix[top], target)\n        elif matrix[bottom][0] <= target and target <= matrix[bottom][-1]:\n            return self.search(matrix[bottom], target)\n        return False\n        \n        \n    def search(self, nums: List[int], target: int) -> bool:\n        start = 0\n        end = len(nums) - 1\n\n        while end - start > 1:\n            mid = (end + start) // 2\n            if nums[mid] == target:\n                return True\n            elif nums[mid] > target:\n                end = mid - 1\n            elif nums[mid] < target:\n                start = mid + 1\n\n        if nums[start] == target:\n            return True\n        if nums[end] == target:\n            return True\n\n        return False","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"search-a-2d-matrix","has_notes":false,"flag_type":1}