{"id":1124788273,"lang":"python","lang_name":"Python","time":"1 week, 3 days","timestamp":1703135326,"status":10,"status_display":"Accepted","runtime":"198 ms","url":"/submissions/detail/1124788273/","is_pending":"Not Pending","title":"Implement Trie (Prefix Tree)","memory":"43.2 MB","code":"class Trie(object):\n    def __init__(self):\n        self.nodes = {}\n        self.accepting = False\n\n    def insert(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: None\n        \"\"\"\n        if len(word) == 0:\n            self.accepting = True\n            return\n        if word[0] in self.nodes:\n            self.nodes[word[0]].insert(word[1:])\n        else:\n            self.nodes[word[0]] = Trie()\n            self.nodes[word[0]].insert(word[1:])\n\n    def search(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n\n        if len(word) == 0:\n            if len(self.nodes) == 0 or self.accepting:\n                return True\n            else:\n                return False\n        if word[0] in self.nodes:\n            return self.nodes[word[0]].search(word[1:])\n        else:\n            return False\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        if len(prefix) == 0:\n            return True\n        if prefix[0] in self.nodes:\n            return self.nodes[prefix[0]].startsWith(prefix[1:])\n        else:\n            return False\n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)","compare_result":"1111111111111111","title_slug":"implement-trie-prefix-tree","has_notes":false,"flag_type":1}