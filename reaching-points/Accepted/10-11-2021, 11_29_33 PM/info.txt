{"id":569821973,"lang":"python3","lang_name":"Python3","time":"2 years, 2 months","timestamp":1634012973,"status":10,"status_display":"Accepted","runtime":"52 ms","url":"/submissions/detail/569821973/","is_pending":"Not Pending","title":"Reaching Points","memory":"14.6 MB","code":"class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        if sx > tx or sy > ty: # can't lower the start values, only raise\n            return False\n        if tx == 1 or ty == 1: # saves time on inputs like 1 1 10^9 1\n            return True\n\n        cx = tx\n        cy = ty\n        while cx != sx or cy != sy:\n            if cx > cy:\n                times = max(int(cx/cy)-1,1)\n                if cy == 1:\n                    times = 1\n                cxbefore = cx\n                cx -= cy*times\n                if times > 1 and cx < sx and (cxbefore-sx) % cy == 0:\n                    cx = sx\n                if cxbefore == cx:\n                    return False\n            elif cx < cy:\n                times = max(int(cy/cx)-1,1)\n                if cx == 1:\n                    times = 1\n                cybefore = cy\n                cy -= cx*times\n                if times > 1 and cy < sy and (cybefore-sy) % cx == 0:\n                    cy = sy\n                if cybefore == cy:\n                    return False\n            else:\n                return False\n            \n            print(cx,cy)\n\n            if cx < sx or cy < sy:\n                return False\n        return True","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"reaching-points","has_notes":false,"flag_type":1}