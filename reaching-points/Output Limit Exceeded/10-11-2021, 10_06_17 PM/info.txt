{"id":569778714,"lang":"python3","lang_name":"Python3","time":"2 years, 2 months","timestamp":1634007977,"status":13,"status_display":"Output Limit Exceeded","runtime":"N/A","url":"/submissions/detail/569778714/","is_pending":"Not Pending","title":"Reaching Points","memory":"N/A","code":"class Solution:\n    def reachingPoints(self, sx: int, sy: int, tx: int, ty: int) -> bool:\n        if sx > tx or sy > ty: # can't lower the start values, only raise\n            return False\n        if tx == 1 or ty == 1: # saves time on inputs like 1 1 10^9 1\n            return True\n\n        cx = tx\n        cy = ty\n        while cx != sx or cy != sy:\n            print(cx, cy)\n\n            if cx > cy:\n                print('<')\n                times = max(1,int(cx/cy)-1)\n                if times > 0:\n                    cx -= cy*times\n                    if cx < sx and abs(cx-sx) % times == 0:\n                        cx = sx\n            elif cx < cy:\n                print('>')\n                times = max(1,int(cy/cx)-1)\n                cy -= cx*times\n                if cy < sy and abs(cy-sy) % times == 0:\n                    cy = sy\n            else:\n                return False\n            \n            print(cx, cy)\n            if cx < sx or cy < sy:\n                return False\n            print(cx, cy)\n        return True","compare_result":"111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000","title_slug":"reaching-points","has_notes":false,"flag_type":1}