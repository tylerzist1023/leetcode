{"id":1129314313,"lang":"python","lang_name":"Python","time":"4 days, 8 hours","timestamp":1703644739,"status":10,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/1129314313/","is_pending":"Not Pending","title":"Min Stack","memory":"17.5 MB","code":"class MinStack(object):\n\n    def __init__(self):\n        self.stack = [] # contains tuples of (val, min)\n\n    def push(self, val):\n        \"\"\"\n        :type val: int\n        :rtype: None\n        \"\"\"\n        if len(self.stack) == 0:\n            self.stack.append((val,val))\n        else:\n            if val < self.getMin():\n                self.stack.append((val,val))\n            else:\n                self.stack.append((val,self.getMin()))\n\n    def pop(self):\n        \"\"\"\n        :rtype: None\n        \"\"\"\n        return self.stack.pop()[0]\n        \n\n    def top(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][0]\n        \n\n    def getMin(self):\n        \"\"\"\n        :rtype: int\n        \"\"\"\n        return self.stack[-1][1]\n        \n\n\n# Your MinStack object will be instantiated and called as such:\n# obj = MinStack()\n# obj.push(val)\n# obj.pop()\n# param_3 = obj.top()\n# param_4 = obj.getMin()","compare_result":"1111111111111111111111111111111","title_slug":"min-stack","has_notes":false,"flag_type":1}